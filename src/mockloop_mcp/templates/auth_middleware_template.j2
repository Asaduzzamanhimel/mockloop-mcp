{# Jinja2 template for FastAPI authentication middleware #}
import jwt
from fastapi import Security, HTTPException, Depends, status
from fastapi.security import APIKeyHeader, APIKeyQuery, OAuth2PasswordBearer
from typing import Dict, List, Optional, Set, Any, Union

# Configure authentication types
API_KEY_NAME = "X-API-Key"
API_KEY_QUERY = "api_key"
MOCK_API_KEY = "mock_api_key_{{ random_suffix }}"

# Configure JWT
JWT_SECRET = "mock_jwt_secret_{{ random_suffix }}"
JWT_ALGORITHM = "HS256"

# Define security schemes
api_key_header = APIKeyHeader(name=API_KEY_NAME, auto_error=False)
api_key_query = APIKeyQuery(name=API_KEY_QUERY, auto_error=False)
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="/token", auto_error=False)

# Pre-defined mock users for token generation
MOCK_USERS = {
    "admin": {
        "username": "admin",
        "email": "admin@example.com",
        "full_name": "Admin User",
        "roles": ["admin"],
        "permissions": ["read", "write", "delete"]
    },
    "user": {
        "username": "user",
        "email": "user@example.com",
        "full_name": "Regular User",
        "roles": ["user"],
        "permissions": ["read", "write"]
    },
    "guest": {
        "username": "guest",
        "email": "guest@example.com",
        "full_name": "Guest User",
        "roles": ["guest"],
        "permissions": ["read"]
    }
}

def verify_api_key(
    api_key_header: str = Security(api_key_header),
    api_key_query: str = Security(api_key_query),
) -> Dict[str, Any]:
    """
    Verify API key from header or query parameter.
    
    This function doesn't actually enforce authentication in the mock server,
    but simulates the API key verification process and returns mock user data.
    """
    if api_key_header == MOCK_API_KEY or api_key_query == MOCK_API_KEY:
        # For a mock server, we'll return admin user for successful auth
        return MOCK_USERS["admin"]
    
    # For mock purposes, we'll accept any key and return guest permissions
    if api_key_header or api_key_query:
        return MOCK_USERS["guest"]
    
    # No API key provided, but this is a mock server so we won't block access
    # In a real API, we'd raise HTTPException here
    return {"guest": True, "permissions": ["read"]}

def verify_jwt_token(token: str = Depends(oauth2_scheme)) -> Dict[str, Any]:
    """
    Verify JWT token and return user information.
    
    This function simulates JWT verification for the mock server.
    """
    if not token:
        # No token, but this is a mock server so we won't block access
        return {"guest": True, "permissions": ["read"]}
    
    try:
        # Try to decode the token
        payload = jwt.decode(token, JWT_SECRET, algorithms=[JWT_ALGORITHM])
        username = payload.get("sub")
        if username in MOCK_USERS:
            return MOCK_USERS[username]
        return MOCK_USERS["guest"]
    except jwt.PyJWTError:
        # Token is invalid, but this is a mock server so we'll still return guest access
        # In a real API, we'd raise HTTPException here
        return {"guest": True, "permissions": ["read"]}

def get_token_for_user(username: str) -> str:
    """
    Generate a mock JWT token for a user.
    """
    if username in MOCK_USERS:
        user = MOCK_USERS[username]
    else:
        user = MOCK_USERS["guest"]
        
    payload = {
        "sub": user["username"],
        "email": user["email"],
        "roles": user["roles"],
        "permissions": user["permissions"]
    }
    
    return jwt.encode(payload, JWT_SECRET, algorithm=JWT_ALGORITHM)

def generate_token_response(username: str, password: str) -> Dict[str, str]:
    """
    Generate a token response for OAuth2 password flow.
    For mock purposes, any password is accepted.
    """
    # In a real API, we'd verify the password here
    # For mock purposes, we'll accept any password for predefined users
    if username in MOCK_USERS:
        token = get_token_for_user(username)
        return {
            "access_token": token,
            "token_type": "bearer"
        }
    else:
        # For mock purposes, we'll return a guest token
        token = get_token_for_user("guest")
        return {
            "access_token": token,
            "token_type": "bearer"
        }
