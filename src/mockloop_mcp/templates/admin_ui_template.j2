<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{ api_title }} Admin - v{{ api_version }}</title>
    <style>
        :root {
            --primary-color: #3498db;
            --secondary-color: #2c3e50;
            --success-color: #2ecc71;
            --danger-color: #e74c3c;
            --warning-color: #f39c12;
            --light-bg: #f8f9fa;
            --dark-bg: #343a40;
            --text-color: #333;
            --light-text: #f8f9fa;
        }
        
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            color: var(--text-color);
            background-color: var(--light-bg);
            padding: 0;
            margin: 0;
        }
        
        .header {
            background-color: var(--primary-color);
            color: white;
            padding: 1rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .header h1 {
            margin: 0;
            font-size: 1.5rem;
        }
        
        .container {
            display: flex;
            min-height: calc(100vh - 60px);
        }
        
        .sidebar {
            width: 250px;
            background-color: var(--secondary-color);
            color: white;
            padding: 1rem 0;
        }
        
        .sidebar-nav {
            list-style: none;
        }
        
        .sidebar-nav li {
            margin-bottom: 0.5rem;
        }
        
        .sidebar-nav a {
            display: block;
            padding: 0.75rem 1rem;
            color: white;
            text-decoration: none;
            transition: background-color 0.3s;
        }
        
        .sidebar-nav a:hover, .sidebar-nav a.active {
            background-color: rgba(255, 255, 255, 0.1);
            border-left: 4px solid var(--primary-color);
        }
        
        .content {
            flex: 1;
            padding: 1.5rem;
            overflow-y: auto;
        }
        
        .dashboard-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 1rem;
            margin-bottom: 2rem;
        }
        
        .card {
            background-color: white;
            border-radius: 5px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
            padding: 1.5rem;
        }
        
        .card-title {
            font-size: 1.2rem;
            margin-bottom: 1rem;
            color: var(--secondary-color);
            border-bottom: 1px solid #eee;
            padding-bottom: 0.5rem;
        }
        
        .stat {
            font-size: 2rem;
            font-weight: bold;
            color: var(--primary-color);
            margin-bottom: 0.5rem;
        }
        
        .tab-content {
            display: none;
        }
        
        .tab-content.active {
            display: block;
        }
        
        table {
            width: 100%;
            border-collapse: collapse;
            margin: 1rem 0;
        }
        
        table th, table td {
            padding: 0.75rem;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }
        
        table th {
            background-color: var(--secondary-color);
            color: white;
        }
        
        table tr:nth-child(even) {
            background-color: #f2f2f2;
        }
        
        .btn {
            display: inline-block;
            padding: 0.5rem 1rem;
            background-color: var(--primary-color);
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            text-decoration: none;
            font-size: 0.9rem;
        }
        
        .btn:hover {
            opacity: 0.9;
        }
        
        .btn-success {
            background-color: var(--success-color);
        }
        
        .btn-danger {
            background-color: var(--danger-color);
        }
        
        .btn-warning {
            background-color: var(--warning-color);
        }
        
        .form-group {
            margin-bottom: 1rem;
        }
        
        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: bold;
        }
        
        .form-control {
            width: 100%;
            padding: 0.5rem;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 1rem;
        }
        
        .alert {
            padding: 1rem;
            border-radius: 4px;
            margin-bottom: 1rem;
        }
        
        .alert-success {
            background-color: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }
        
        .alert-danger {
            background-color: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }
        
        .json-viewer {
            background-color: #f8f8f8;
            border: 1px solid #ddd;
            border-radius: 4px;
            padding: 1rem;
            font-family: monospace;
            white-space: pre-wrap;
            max-height: 500px;
            overflow-y: auto;
        }
        
        .badge {
            display: inline-block;
            padding: 0.25rem 0.5rem;
            border-radius: 10px;
            font-size: 0.8rem;
            font-weight: bold;
        }
        
        .badge-success {
            background-color: var(--success-color);
            color: white;
        }
        
        .badge-danger {
            background-color: var(--danger-color);
            color: white;
        }
        
        .badge-warning {
            background-color: var(--warning-color);
            color: white;
        }
        
        .badge-info {
            background-color: var(--primary-color);
            color: white;
        }
        
        .footer {
            background-color: var(--secondary-color);
            color: white;
            text-align: center;
            padding: 1rem;
            font-size: 0.9rem;
            border-top: 1px solid #ddd;
        }
        
        .footer a {
            color: var(--primary-color);
            text-decoration: none;
        }
        
        .footer a:hover {
            text-decoration: underline;
        }
    </style>
</head>
<body>
    <header class="header">
        <h1>{{ api_title }} Admin UI</h1>
        <div>
            <span>Version: {{ api_version }}</span>
        </div>
    </header>
    
    <div class="container">
        <nav class="sidebar">
            <ul class="sidebar-nav">
                <li><a href="#" class="nav-link active" data-tab="dashboard">Dashboard</a></li>
                <li><a href="#" class="nav-link" data-tab="requests">Request Logs</a></li>
                <li><a href="#" class="nav-link" data-tab="webhooks">Webhooks</a></li>
                <li><a href="#" class="nav-link" data-tab="data">Stored Data</a></li>
                <li><a href="#" class="nav-link" data-tab="auth">Authentication</a></li>
                <li><a href="#" class="nav-link" data-tab="docs">API Documentation</a></li>
                <li><a href="#" class="nav-link" data-tab="settings">Settings</a></li>
            </ul>
        </nav>
        
        <main class="content">
            <!-- Dashboard Tab -->
            <div id="dashboard" class="tab-content active">
                <h2>Dashboard</h2>
                <div class="dashboard-grid">
                    <div class="card">
                        <h3 class="card-title">Total Requests</h3>
                        <div class="stat" id="total-requests">0</div>
                        <p>Requests handled by this mock API</p>
                    </div>
                    
                    <div class="card">
                        <h3 class="card-title">Active Webhooks</h3>
                        <div class="stat" id="active-webhooks">0</div>
                        <p id="webhooks-description">Registered webhook endpoints</p>
                    </div>
                    
                    <div class="card">
                        <h3 class="card-title">Stored Data</h3>
                        <div class="stat" id="stored-data-count">0</div>
                        <p id="storage-description">Records in persistent storage</p>
                    </div>
                    
                    <div class="card">
                        <h3 class="card-title">Server Status</h3>
                        <div><span class="badge badge-success">Running</span></div>
                        <p>Mock server is operational</p>
                    </div>
                </div>
                
                <div class="card">
                    <h3 class="card-title">Recent Requests</h3>
                    <table id="recent-requests-table">
                        <thead>
                            <tr>
                                <th>Timestamp</th>
                                <th>Method</th>
                                <th>Path</th>
                                <th>Status</th>
                                <th>Response Time</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td colspan="5">No request logs available</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
            
            <!-- Request Logs Tab -->
            <div id="requests" class="tab-content">
                <h2>Request Logs</h2>
                <div class="card">
                    <div class="form-group">
                        <label for="filter-method">Filter by Method</label>
                        <select id="filter-method" class="form-control">
                            <option value="">All Methods</option>
                            <option value="GET">GET</option>
                            <option value="POST">POST</option>
                            <option value="PUT">PUT</option>
                            <option value="DELETE">DELETE</option>
                            <option value="PATCH">PATCH</option>
                        </select>
                    </div>
                    
                    <table id="requests-table">
                        <thead>
                            <tr>
                                <th>Timestamp</th>
                                <th>Method</th>
                                <th>Path</th>
                                <th>Status</th>
                                <th>Response Time</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
            <tr>
                <td colspan="6">No request logs available yet. Make some API requests to see them logged here.</td>
            </tr>
                        </tbody>
                    </table>
                </div>
                
                <div class="card" id="request-details" style="display: none;">
                    <h3 class="card-title">Request Details</h3>
                    <div class="form-group">
                        <label>Headers</label>
                        <div class="json-viewer" id="request-headers"></div>
                    </div>
                    <div class="form-group">
                        <label>Request Body</label>
                        <div class="json-viewer" id="request-body"></div>
                    </div>
                    <div class="form-group">
                        <label>Response</label>
                        <div class="json-viewer" id="response-body"></div>
                    </div>
                </div>
            </div>
            
            <!-- Webhooks Tab -->
            <div id="webhooks" class="tab-content">
                <h2>Webhooks</h2>
                {% if not webhooks_enabled %}
                <div class="alert alert-warning">
                    <strong>Webhooks feature is not enabled.</strong> This mock server was generated without webhook support.
                </div>
                {% else %}
                <div class="card">
                    <h3 class="card-title">Register New Webhook</h3>
                    <form id="webhook-form">
                        <div class="form-group">
                            <label for="webhook-event">Event Type</label>
                            <select id="webhook-event" class="form-control" required>
                                <option value="">Select Event Type</option>
                                <option value="data.created">Data Created</option>
                                <option value="data.updated">Data Updated</option>
                                <option value="data.deleted">Data Deleted</option>
                                <option value="auth.login">Authentication</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="webhook-url">Callback URL</label>
                            <input type="url" id="webhook-url" class="form-control" placeholder="https://your-server.com/webhook" required>
                        </div>
                        <div class="form-group">
                            <label for="webhook-description">Description</label>
                            <input type="text" id="webhook-description" class="form-control" placeholder="Optional description">
                        </div>
                        <button type="submit" class="btn btn-success">Register Webhook</button>
                    </form>
                </div>
                {% endif %}
                
                <div class="card">
                    <h3 class="card-title">Registered Webhooks</h3>
                    <table id="webhooks-table">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Event Type</th>
                                <th>URL</th>
                                <th>Status</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td colspan="5">{% if not webhooks_enabled %}Webhooks feature not enabled{% else %}No webhooks registered{% endif %}</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                
                <div class="card">
                    <h3 class="card-title">Webhook Delivery History</h3>
                    <table id="webhook-history-table">
                        <thead>
                            <tr>
                                <th>Timestamp</th>
                                <th>Event Type</th>
                                <th>URL</th>
                                <th>Status</th>
                                <th>Attempts</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td colspan="5">{% if not webhooks_enabled %}Webhooks feature not enabled{% else %}No webhook delivery history{% endif %}</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
            
            <!-- Stored Data Tab -->
            <div id="data" class="tab-content">
                <h2>Stored Data</h2>
                {% if not storage_enabled %}
                <div class="alert alert-warning">
                    <strong>Storage feature is not enabled.</strong> This mock server was generated without persistent storage support.
                </div>
                {% else %}
                <div class="card">
                    <h3 class="card-title">Collections</h3>
                    <div class="form-group">
                        <label for="collection-select">Select Collection</label>
                        <select id="collection-select" class="form-control">
                            <option value="">Select a collection</option>
                        </select>
                    </div>
                    
                    <button id="create-collection-btn" class="btn">Create New Collection</button>
                </div>
                {% endif %}
                
                <div class="card" id="collection-data" style="display: none;">
                    <h3 class="card-title">Collection Data: <span id="current-collection"></span></h3>
                    <button id="add-record-btn" class="btn btn-success">Add New Record</button>
                    <button id="clear-collection-btn" class="btn btn-danger">Clear Collection</button>
                    
                    <table id="data-table">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Created</th>
                                <th>Updated</th>
                                <th>Data</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td colspan="5">{% if not storage_enabled %}Storage feature not enabled{% else %}No data in this collection{% endif %}</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                
                <div class="card" id="edit-record" style="display: none;">
                    <h3 class="card-title">Edit Record</h3>
                    <div class="form-group">
                        <label for="record-editor">JSON Data</label>
                        <textarea id="record-editor" class="form-control" rows="10"></textarea>
                    </div>
                    <button id="save-record-btn" class="btn btn-success">Save Changes</button>
                    <button id="cancel-edit-btn" class="btn">Cancel</button>
                </div>
            </div>
            
            <!-- Authentication Tab -->
            <div id="auth" class="tab-content">
                <h2>Authentication</h2>
                {% if auth_enabled %}
                <div class="card">
                    <h3 class="card-title">API Keys</h3>
                    <div class="alert alert-info">
                        For testing purposes, the following API key is available:
                    </div>
                    <div class="form-group">
                        <label>API Key</label>
                        <div class="form-control" id="api-key-display">mock-api-key-xxxxxxxx</div>
                    </div>
                    <p>Use this key in the X-API-Key header for authenticated endpoints.</p>
                </div>
                
                <div class="card">
                    <h3 class="card-title">JWT Authentication</h3>
                    <div class="alert alert-info">
                        For testing JWT authentication, the following users are available:
                    </div>
                    <table>
                        <thead>
                            <tr>
                                <th>Username</th>
                                <th>Password</th>
                                <th>Roles</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>admin</td>
                                <td><em>any password</em></td>
                                <td>admin</td>
                            </tr>
                            <tr>
                                <td>user</td>
                                <td><em>any password</em></td>
                                <td>user</td>
                            </tr>
                            <tr>
                                <td>guest</td>
                                <td><em>any password</em></td>
                                <td>guest</td>
                            </tr>
                        </tbody>
                    </table>
                    <p>Get a JWT token by sending a POST request to /token with username and password.</p>
                </div>
                {% else %}
                <div class="alert alert-warning">
                    <strong>Authentication feature is not enabled.</strong> This mock server was generated without authentication support.
                </div>
                {% endif %}
            </div>
            
            <!-- API Documentation Tab -->
            <div id="docs" class="tab-content">
                <h2>API Documentation</h2>
                <div class="card">
                    <h3 class="card-title">Swagger UI</h3>
                    <p>View interactive API documentation at:</p>
                    <p><a href="/docs" target="_blank" class="btn">/docs</a></p>
                </div>
                
                <div class="card">
                    <h3 class="card-title">ReDoc</h3>
                    <p>View alternative API documentation at:</p>
                    <p><a href="/redoc" target="_blank" class="btn">/redoc</a></p>
                </div>
                
                <div class="card">
                    <h3 class="card-title">OpenAPI Specification</h3>
                    <p>Download the OpenAPI specification at:</p>
                    <p><a href="/openapi.json" target="_blank" class="btn">/openapi.json</a></p>
                </div>
            </div>
            
            <!-- Settings Tab -->
            <div id="settings" class="tab-content">
                <h2>Settings</h2>
                <div class="card">
                    <h3 class="card-title">Mock Server Settings</h3>
                    <form id="settings-form">
                        <div class="form-group">
                            <label for="response-delay">Response Delay (ms)</label>
                            <input type="number" id="response-delay" class="form-control" min="0" value="0">
                            <small>Add artificial delay to API responses to simulate network latency</small>
                        </div>
                        
                        <div class="form-group">
                            <label for="error-rate">Error Rate (%)</label>
                            <input type="number" id="error-rate" class="form-control" min="0" max="100" value="0">
                            <small>Percentage chance of randomly returning a 5xx error</small>
                        </div>
                        
                        <div class="form-group">
                            <label>
                                <input type="checkbox" id="validate-requests"> 
                                Validate Requests
                            </label>
                            <small>Validate incoming requests against the API schema</small>
                        </div>
                        
                        <div class="form-group">
                            <label>
                                <input type="checkbox" id="cors-enabled" checked> 
                                Enable CORS
                            </label>
                            <small>Allow cross-origin requests from any domain</small>
                        </div>
                        
                        <button type="submit" class="btn btn-success">Save Settings</button>
                    </form>
                </div>
            </div>
        </main>
    </div>
    
    <footer class="footer">
        <p>Mock API generated by <a href="https://mockloop.com" target="_blank">MockLoop</a> | 
        <a href="https://github.com/MockLoop/mockloop-mcp" target="_blank">GitHub Repository</a></p>
    </footer>
    
    <script>
        // Basic tab switching functionality
        document.addEventListener('DOMContentLoaded', function() {
            const navLinks = document.querySelectorAll('.nav-link');
            const tabContents = document.querySelectorAll('.tab-content');
            
            navLinks.forEach(link => {
                link.addEventListener('click', function(e) {
                    e.preventDefault();
                    
                    // Remove active class from all links and tabs
                    navLinks.forEach(link => link.classList.remove('active'));
                    tabContents.forEach(tab => tab.classList.remove('active'));
                    
                    // Add active class to clicked link and corresponding tab
                    this.classList.add('active');
                    const tabId = this.getAttribute('data-tab');
                    document.getElementById(tabId).classList.add('active');
                });
            });
            
            // Generate API key for display
            document.getElementById('api-key-display').textContent = 'mock-api-key-' + Math.random().toString(36).substring(2, 10);
            
            // Load real dashboard stats
            loadDashboardStats();
        });
        
        // Function to load dashboard statistics from API endpoints
        async function loadDashboardStats() {
            try {
                // Initialize stats to 0
                document.getElementById('total-requests').textContent = '0';
                
                {% if webhooks_enabled %}
                // Try to load webhooks count
                try {
                    const webhooksResponse = await fetch('/admin/api/webhooks');
                    if (webhooksResponse.ok) {
                        const webhooks = await webhooksResponse.json();
                        document.getElementById('active-webhooks').textContent = webhooks.length || '0';
                    } else {
                        document.getElementById('active-webhooks').textContent = '0';
                    }
                } catch (e) {
                    document.getElementById('active-webhooks').textContent = '0';
                }
                {% else %}
                document.getElementById('active-webhooks').textContent = 'N/A';
                document.getElementById('webhooks-description').textContent = 'Webhooks feature not enabled';
                {% endif %}
                
                {% if storage_enabled %}
                // Try to load storage statistics
                try {
                    const storageResponse = await fetch('/admin/api/storage/stats');
                    if (storageResponse.ok) {
                        const storageStats = await storageResponse.json();
                        document.getElementById('stored-data-count').textContent = storageStats.total_records || '0';
                    } else {
                        document.getElementById('stored-data-count').textContent = '0';
                    }
                } catch (e) {
                    document.getElementById('stored-data-count').textContent = '0';
                }
                {% else %}
                document.getElementById('stored-data-count').textContent = 'N/A';
                document.getElementById('storage-description').textContent = 'Storage feature not enabled';
                {% endif %}
                
                // Try to load request logs
                try {
                    const requestsResponse = await fetch('/admin/api/requests');
                    if (requestsResponse.ok) {
                        const requests = await requestsResponse.json();
                        document.getElementById('total-requests').textContent = requests.length || '0';
                        
                        // Update recent requests table
                        if (requests.length > 0) {
                            updateRecentRequestsTable(requests.slice(-10)); // Show last 10 requests
                            
                            // Also update the main requests table in the Requests tab
                            updateRequestsTable(requests);
                        }
                    }
                } catch (e) {
                    // If request logs endpoint doesn't exist, keep default 0
                    console.log('Request logs endpoint not available');
                }
                
            } catch (error) {
                console.error('Error loading dashboard stats:', error);
                // Keep default values on error
            }
        }
        
        // Function to update recent requests table
        function updateRecentRequestsTable(requests) {
            const tbody = document.querySelector('#recent-requests-table tbody');
            if (!requests || requests.length === 0) {
                tbody.innerHTML = '<tr><td colspan="5">No request logs available yet. Make some API requests to see them logged here.</td></tr>';
                return;
            }
            
            tbody.innerHTML = requests.map(req => `
                <tr>
                    <td>${req.timestamp ? new Date(req.timestamp).toLocaleString() : 'N/A'}</td>
                    <td><span class="badge badge-info">${req.method || 'N/A'}</span></td>
                    <td>${req.path || 'N/A'}</td>
                    <td><span class="badge ${getStatusBadgeClass(req.status_code)}">${req.status_code || 'N/A'}</span></td>
                    <td>${(req.process_time_ms !== undefined && req.process_time_ms !== null) ? req.process_time_ms + 'ms' : 'N/A'}</td>
                </tr>
            `).join('');
        }
        
        // Function to update the main requests table in the Requests tab
        function updateRequestsTable(requests) {
            const tbody = document.querySelector('#requests-table tbody');
            if (!requests || requests.length === 0) {
                tbody.innerHTML = '<tr><td colspan="6">No request logs available yet. Make some API requests to see them logged here.</td></tr>';
                return;
            }
            
            tbody.innerHTML = requests.map(req => `
                <tr>
                    <td>${req.timestamp ? new Date(req.timestamp).toLocaleString() : 'N/A'}</td>
                    <td><span class="badge badge-info">${req.method || 'N/A'}</span></td>
                    <td>${req.path || 'N/A'}</td>
                    <td><span class="badge ${getStatusBadgeClass(req.status_code)}">${req.status_code || 'N/A'}</span></td>
                    <td>${(req.process_time_ms !== undefined && req.process_time_ms !== null) ? req.process_time_ms + 'ms' : 'N/A'}</td>
                    <td>
                        <button class="btn btn-info btn-sm" onclick="showRequestDetails(${req.id})">View Details</button>
                    </td>
                </tr>
            `).join('');
        }
        
        // Function to show request details
        async function showRequestDetails(requestId) {
            try {
                const response = await fetch(`/admin/api/requests?limit=1&offset=0&id=${requestId}`);
                if (response.ok) {
                    const requests = await response.json();
                    if (requests && requests.length > 0) {
                        const req = requests[0];
                        document.getElementById('request-headers').textContent = JSON.stringify(req.headers || {}, null, 2);
                        document.getElementById('request-body').textContent = req.request_body || 'No request body';
                        document.getElementById('response-body').textContent = req.response_body || 'No response body';
                        document.getElementById('request-details').style.display = 'block';
                    }
                }
            } catch (error) {
                console.error('Error fetching request details:', error);
            }
        }
        
        // Function to get appropriate badge class for HTTP status codes
        function getStatusBadgeClass(status) {
            if (status >= 200 && status < 300) return 'badge-success';
            if (status >= 300 && status < 400) return 'badge-info';
            if (status >= 400 && status < 500) return 'badge-warning';
            if (status >= 500) return 'badge-danger';
            return 'badge-info';
        }
        
        // Initialize the application when the DOM is fully loaded
        document.addEventListener('DOMContentLoaded', function() {
            // Load request logs for the Requests tab
            document.querySelector('.nav-link[data-tab="requests"]').addEventListener('click', async function() {
                try {
                    const response = await fetch('/admin/api/requests');
                    if (response.ok) {
                        const requests = await response.json();
                        updateRequestsTable(requests);
                    }
                } catch (error) {
                    console.error('Error loading requests:', error);
                }
            });
            
            // Setup filter by method
            document.getElementById('filter-method').addEventListener('change', async function() {
                const method = this.value;
                try {
                    const url = method ? `/admin/api/requests?method=${method}` : '/admin/api/requests';
                    const response = await fetch(url);
                    if (response.ok) {
                        const requests = await response.json();
                        updateRequestsTable(requests);
                    }
                } catch (error) {
                    console.error('Error filtering requests:', error);
                }
            });
        });
    </script>
</body>
</html>
